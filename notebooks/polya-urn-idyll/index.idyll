[meta title:"Polya Urn Idyll" description:"Short description of your
project" /]

[Header fullWidth:true title:"Polya Urn Idyll" subtitle:"Welcome to
Idyll. Open index.idyll to start writing" author:"Your Name Here"
authorLink:"https://idyll-lang.org" date:`(new
Date()).toDateString()` background:"#222222" color:"#ffffff" /]


## Introduction

The Polyà urn model is a statistical experiment in which we study the
distribution of two populations of distinctly colored balls in an urn. In its
simplest form, the problem can be stated as follows:

[div className:"definition"]
Given an urn containing initially [equation]a[/equation]  [Population
text:" orange" group:"a" /] balls
and [equation]b[/equation]  [Population text:" blue" group:"b" /]
balls, we pick a ball at random from
the urn, place it back in the urn and add a new ball of the same color
in the urn; Repeat the following step [equation]n[/equation] times.
[/div]

x

[var name:"a" value: 1 /]
[var name:"b" value: 2 /]
[button onClick:`if (Math.random() > 0.5) {a++} else {b++}`]
Simulate
[/button]
[PolyaUrn className:"d3-component" state:state a:a b:b/]


TODO motivation


## Dynamics of the model


## Asymptotic Behaviour



## Generalized Polyà urn



Configuration can be done via the `idyll` field in `package.json`.

## Markup

Idyll is based on Markdown.

You can use familiar syntax to create **bold** (`**bold**` ) and
*italic* (``*italic*` ) styles,

* lists of items,

``` * lists * of * items, ```

1. and numbered 2. lists 3. of items,


``` 1. and numbered 2. lists 3. of items, ```

in addition to [hyperlinks](https://idyll-lang.org) and images:

![quill](static/images/quill.svg)

``` ![quill](static/images/quill.svg) ```

## Components

Components can be embedded using a bracket syntax:

``` [Range /] ```

and can contain nested content:

``` [Equation]e = mc^{2}[/Equation] ```

Components accept properties:

``` [Range value:x min:0 max:1 /] ```

that can be bound to variables to achieve interactivity (more in next
section).


A variety of components are included by default. See [all the
available components](https://idyll-lang.org/docs/components/). You
can also use any html tag, for example: `[div] A div! [/div]`.

To create your own, add it to the `components/` folder. There are
examples of how to use Idyll with React and D3 based components
already included.



## Interactivity

Here is how you can instantiate a variable and bind it to a component:

[var name:"exampleVar" value:5 /]

[Range min:0 max:10 value:exampleVar /] [Display value:exampleVar /]

``` [var name:"exampleVar" value:5 /]

[Range min:0 max:10 value:exampleVar /] [Display value:exampleVar /]
```

## Learn More

To learn more see the documentation at https://idyll-lang.org/docs/,
join our [chatroom](https://gitter.im/idyll-lang/Lobby), or see the
project on [GitHub](https://github.com/idyll-lang/idyll).

[hr /]

# Technical Details

## Installation

- Make sure you have `idyll` installed (`npm i -g idyll`).  Clone this
- repo and run `npm install`.

## Developing a post locally

Run `idyll`.

## Building a post for production

Run `idyll build`. The output will appear in the top-level `build`
folder. To change the output location, change the `output` option in
`package.json`.

## Deploying

Make sure your post has been built, then deploy the docs folder via
any static hosting service.

## Dependencies

You can install custom dependencies by running `npm install
<package-name> --save`. Note that any collaborators will also need
download the package locally by running `npm install` after pulling
the changes.
