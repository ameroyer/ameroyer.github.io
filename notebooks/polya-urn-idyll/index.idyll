[meta title:"Polya Urn Idyll" description:"Short description of your
project" /]

[Header fullWidth:true title:"Polya Urn Idyll" subtitle:"Welcome to
Idyll. Open index.idyll to start writing" author:"Your Name Here"
authorLink:"https://idyll-lang.org" date:`(new
Date()).toDateString()` background:"#222222" color:"#ffffff" /]


## Introduction

The Polyà urn model is a statistical experiment in which we study the distribution of two populations of distinctly colored balls in an urn. In its simplest form, the problem can be stated as follows:

[div className:"definition"]
Given an urn containing initially [equation]a[/equation]   [span className:"popa"] orange[/span] balls and [equation]b[/equation]   [span className:"popb"] blue[/span] balls, we pick one ball at random from the urn, place it back in the urn and add one new ball of the same color in the urn; We then repeat this sampling procedure [equation]n[/equation] times.
[/div]


[var name:"a0" value:1 type:int/]
[var name:"b0" value:2 type:int/]
[var name:"run" value:false /]

[div]
[Inline]
[button className:"simulate" onClick:`run = true`]
Simulate
[/button]
[/Inline]
Polyà urn wih [equation]a =[/equation] [Dynamic value:a0 max:12 min:1 display:`a0.toString()`/] and [equation]b =[/equation] [Dynamic value:b0 max:12 min:1 display:`b0.toString()`/]
[/div]
[PolyaUrn className:"d3-component" state:state a0:a0 b0:b0 run:run /]


TODO motivation


## Basic dynamics of the model

#### f
Let us first express the *probability of having picked [equation]k[/equation] [Population text:" blue" group:"b" /] objects after [equation]n \geq k[/equation] steps* of the experiment. Denoting by [equation]B_n[/equation] the number of blue balls at step  [equation]n[/equation], and by [equation]S_n[/equation] the sampling event at step [equation]n[/equation], taking value [span className:"popb"]1[/span] if a blue ball is sampled and  [span className:"popa"]0[/span] otherwise:

[Equation display:true]
\mathbb{P} (B_n = b + k) = \sum_{\textbf{s} \in {\{0, 1\}}^n \atop
\sum_i \textbf{s}_i = k}  \mathbb{P}(\mathbf{s}) =  \sum_{\mathbf{s} \in {\{0, 1\}}^n \atop \sum_i \mathbf{s}_i = k}  \mathbb{P}(S_1 = s_1, \dots S_{n} = s_n)
[/Equation]


[Aside]
[div className:"detail"]
[Equation]\ \ \ \ \mathbb{P}(S_1 = s_1, \dots, S_{n} = s_n)[/Equation]
[Equation]= \mathbb{P}(S_1 = s_1)  \mathbb{P}(S_2 = s_2\ |\ S_1 = s_1) \dots[/Equation]
[/div]
[/Aside]
We can expand the inner term by using the probability [span className:"text_detail"]chain rule[/span]: the probability of drawing a ball of a certain color is simply the ratio of correspondingly colored balls in the urn, which evolves with each sampling. More formally, the conditional probability of drawing a [span className:"popb"]blue[/span]  can be written as:

[Aside][equation](1)[/equation][/Aside]
[Equation display:true]
\mathbb{P}(S_n = 1\ |\ S_{1} = s_1, \dots, S_{n-1} = s_{n-1}) =
\frac{b + \sum_{i = 1}^{n - 1} s_i}{a + b + n - 1}
[/Equation]

From this expression, we can see that the probability does not depend on the  time step [equation]n[/equation] but rather on *how many blue balls have been sampled until now*. In other words, for any sequence of draws [equation]\mathbf{s}[/equation], we can arrange the order in which the balls have been drawn to see that equation [equation](1)[/equation] is equivalent to:

[Aside][equation](2)[/equation][/Aside]
[Equation display:true]
\mathbb{P}(S_n = 1\ |\ S_{1} = \textcolor{CornflowerBlue}{1}, \dots,
S_{\bar{\mathbf{s}}} = \textcolor{CornflowerBlue}{1},
S_{\bar{\mathbf{s}} + 1} = \textcolor{Orange}{0} \dots S_{n-1} = \textcolor{Orange}{0}  )
[/Equation]

where [equation]\bar{\mathbf{s}}[/equation] is a shortcut notation for [equation]\sum_{i=1}^{n-1} s_i[/equation] from [equation](1)[/equation]. The same analysis holds for the conditional probability of drawing a orange ball.


[Aside]
[div className:"detail"]
Illustration
[/div]
[/Aside]
TODO(plot)


Bringing everything together, we can finally write
[Equation display:true]
\mathbb{P} (B_n = b + k) = \binom{n}{k} \mathbb{P}(S_1 =
\textcolor{CornflowerBlue}{1}, \dots, S_k = \textcolor{CornflowerBlue}{1}, S_{k+1} = \textcolor{Orange}{0} \dots S_{n} = \textcolor{Orange}{0})
[/Equation]
[Equation display:true]
= \binom{n}{k} \prod_{p=0}^{k-1} \frac{b + p}{a+ b + p}  \prod_{q=0}^{n-k-1} \frac{a + q}{a+ b + q}
[/Equation]
[Equation display:true]
= \binom{n}{k} \frac{(b+k-1)! (a+b-1)! (a+n-k-1)!}{(b-1)! (a-1)! (a+b+n-1)!}
[/Equation]

[Aside][equation](3)[/equation][/Aside]
[Equation display:true style.color=red]
\mathbb{P} (B_n = b + k) = \frac{\binom{n}{k} \binom{a+b}{b}}{\binom{a+b+n-1}{b+k}}  \frac{ab}{(a+b)(b+k)}
[/Equation]

[Equation display:true]
&=  \binom{n}{k} \mathbb{P}(O_1 = 1)  \dots  \mathbb{P}(O_k = 1\ |\ O_{1\dots k-1} = 1) \mathbb{P}(O_{k+1} = 0\ |\ O_{1\dots k} = 1) \\ &\dots \mathbb{P}(O_{n} = 0\ |\ O_{1\dots k} = 1, O_{k+1\dots n} = 0)\\
&= \binom{n}{k} \prod_{p=0}^{k-1} \frac{b + p}{a+ b + p}  \prod_{q=0}^{n-k-1} \frac{a + q}{a+ b + q} = \binom{n}{k} \frac{(b+k-1)! (a+b-1)! (a+n-k-1)!}{(b-1)! (a-1)! (a+b+n-1)!} &(1)\\
\mathbb{P} (B_n = b + k) &= \frac{\binom{n}{k} \binom{a+b}{b}}{\binom{a+b+n-1}{b+k}}  \frac{ab}{(a+b)(b+k)}
[/Equation]

Consequently, we can compute the probability of **picking a black ball at step $k$**, independently of the state of the urn at time $k - 1$:
\begin{align*}
\mathbb{P} (O_k = 1) &= \sum_{j=0}^k \mathbb{P}(O_k = 1\ |\ B_{k-1} = b + j)\ \mathbb{P}(B_{k-1} = b + j) \\
&= \frac{ab\binom{a+b}{b}}{(a+b+k)(a+b)} \underbrace{\sum_{j=0}^k \frac{\binom{k}{j}}{\binom{a+b+k-1}{b+j}}}_{f(k, a, b)}
\end{align*}


To obtain a simpler expression, we use Pascal's triangle on the numerator and observe that:
\begin{align*}
f(k, a, b) &= \sum_{j=0}^k \frac{\binom{k}{j}}{\binom{a+b+k-1}{b+j}} = \frac{1}{\binom{a+b+k-1}{b}} + \frac{1}{\binom{a+b+k-1}{b+k}} + \sum_{j=1}^{k-1} \frac{\binom{k-1}{j}}{\binom{a+b+k-1}{b+j}} + \sum_{j=1}^{k-1} \frac{\binom{k-1}{j-1}}{\binom{a+b+k-1}{b+j}}\\
&= \sum_{j=0}^{k-1} \frac{\binom{k-1}{j}}{\binom{a+b+k-1}{b+j}} + \sum_{j=0}^{k-1} \frac{\binom{k-1}{j}}{\binom{a+b+k-1}{b+j+1}}\\
f(k, a, b) &= f(k-1, a+1, b) + f(k-1, a, b+1)
\end{align*}

By extending the relation, one can infer and finally prove by induction over $k$, that $f(k, a, b) = \frac{a+b+k}{(a+b) \binom{a+b-1}{b}}$, thus:
\begin{align*}
\mathbb{P} (O_k = 1) &= \frac{b}{a+b}
\end{align*}

In particular, for the case where $a = 1$ and $b = 1$, we have 
$\mathbb{P} (B_n = k + 1) = \frac{1}{n + 1}$ and $\mathbb{P} (O_k = 1) = \frac{b}{a+b} = \frac{1}{2}$, i.e. all urn configurations are equiprobable.

## Asymptotic Behaviour



## Generalized Polyà urn



Configuration can be done via the `idyll` field in `package.json`.

## Markup

Idyll is based on Markdown.

You can use familiar syntax to create **bold** (`**bold**` ) and
*italic* (``*italic*` ) styles,

* lists of items,

``` * lists * of * items, ```

1. and numbered 2. lists 3. of items,


``` 1. and numbered 2. lists 3. of items, ```

in addition to [hyperlinks](https://idyll-lang.org) and images:

![quill](static/images/quill.svg)

``` ![quill](static/images/quill.svg) ```

## Components

Components can be embedded using a bracket syntax:

``` [Range /] ```

and can contain nested content:

``` [Equation]e = mc^{2}[/Equation] ```

Components accept properties:

``` [Range value:x min:0 max:1 /] ```

that can be bound to variables to achieve interactivity (more in next
section).


A variety of components are included by default. See [all the
available components](https://idyll-lang.org/docs/components/). You
can also use any html tag, for example: `[div] A div! [/div]`.

To create your own, add it to the `components/` folder. There are
examples of how to use Idyll with React and D3 based components
already included.



## Interactivity

Here is how you can instantiate a variable and bind it to a component:

[var name:"exampleVar" value:5 /]

[Range min:0 max:10 value:exampleVar /] [Display value:exampleVar /]

``` [var name:"exampleVar" value:5 /]

[Range min:0 max:10 value:exampleVar /] [Display value:exampleVar /]
```

## Learn More

To learn more see the documentation at https://idyll-lang.org/docs/,
join our [chatroom](https://gitter.im/idyll-lang/Lobby), or see the
project on [GitHub](https://github.com/idyll-lang/idyll).

[hr /]

# Technical Details

## Installation

- Make sure you have `idyll` installed (`npm i -g idyll`).  Clone this
- repo and run `npm install`.

## Developing a post locally

Run `idyll`.

## Building a post for production

Run `idyll build`. The output will appear in the top-level `build`
folder. To change the output location, change the `output` option in
`package.json`.

## Deploying

Make sure your post has been built, then deploy the docs folder via
any static hosting service.

## Dependencies

You can install custom dependencies by running `npm install
<package-name> --save`. Note that any collaborators will also need
download the package locally by running `npm install` after pulling
the changes.
